syntax="proto3";// syntax of the proto file (current version is 3)
package ro.tuc.chat.proto_gen; // package where we will generate the file

option java_multiple_files = true; // use multiple file for each object instead of one big file

message ChatMessage {
  string fromUserName = 1;
  string toUserName = 2;
  string message = 3;
  string timeStamp = 4;
}

message UpdateRequest {
  reserved 2;

  string requestSenderName = 1;
}

message OpenSessionRequest {
  string fromUserName = 1;
}

message OpenSessionRequestResponse {
  string fromUserName = 1;
  bool accepted = 2;
}

message MessageReadingStatus {
  string readerUserName = 1;
  string senderUserName = 2;
  string readMessagesUntil = 3;
}

message MessageTypingStatus {
  string typerUserName = 1;
  string recipientUserName = 2;
  bool typing = 3;
}

message Status {
  bool successful = 1;
  string errorMessage = 2;
}

message SendMessageStatus {
  oneof result {
    Status status = 1;
    ChatMessage sentMessage = 2;
  }
}

message Empty {}

service ChatService {
  // message sending and receiving
  rpc sendMessage(ChatMessage) returns (SendMessageStatus) {}
  rpc receiveMessage(UpdateRequest) returns (stream ChatMessage) {}

  // opening a session
  rpc sendOpenSessionRequest(OpenSessionRequest) returns (OpenSessionRequestResponse) {}
  rpc receiveOpenSessionRequest(Empty) returns (stream OpenSessionRequest) {}
  rpc acceptOpenSessionRequest(OpenSessionRequestResponse) returns (Status) {}

  // marking messages that are read
  rpc sendMessageReadingStatusUpdate(MessageReadingStatus) returns (Status) {}
  rpc receiveMessageReadingStatusUpdates(UpdateRequest) returns (stream MessageReadingStatus) {}

  // mark typing
  rpc sendMessageTypingStatusUpdate(MessageTypingStatus) returns (Status) {}
  rpc receiveMessageTypingStatusUpdate(UpdateRequest) returns (stream MessageTypingStatus) {}
}